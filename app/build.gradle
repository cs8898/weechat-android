import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'

dependencies {
    implementation project (':cats')
    implementation project (':relay')

    // todo
    implementation 'org.slf4j:slf4j-api:1.7.12'
    implementation 'com.noveogroup.android:android-logger:1.3.5'

    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:support-annotations:28.0.0' // For @Nullable/@NonNull
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:preference-v7:28.0.0'  // preference fragment & al
    implementation 'com.android.support:preference-v14:28.0.0' // styling for the fragment
    implementation 'com.android.support:support-emoji:28.0.0'

    implementation 'org.aspectj:aspectjrt:1.8.6'
    implementation 'junit:junit:4.12'

    implementation "commons-codec:commons-codec:1.9"

    implementation 'org.greenrobot:eventbus:3.0.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        versionCode 437
        versionName "0.13"

        minSdkVersion 16
        targetSdkVersion 28
        buildConfigField "String", "VERSION_BANNER", "\"" + versionBanner() + "\""
    }

    signingConfigs {
        releasePlayConfig
        devPlayConfig
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }

        // These are the real releases in the Google Play Store
        release {
            signingConfig signingConfigs.releasePlayConfig
            minifyEnabled true
            proguardFile file('proguard-rules.pro')
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile file('../cats/proguard-rules.pro')
        }

        // Development releases in the Google Play Store(signed same as the cloudbees site)
        devrelease {
            initWith release
            signingConfig signingConfigs.devPlayConfig
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
      abortOnError false
    }
}

// Load properties from the user's local gradle.properties file(for both release and "dev" release builds)
if (project.hasProperty('devStorefile') &&
    project.hasProperty('devStorePassword') &&
    project.hasProperty('devKeyAlias') &&
    project.hasProperty('devKeyPassword')) {
    android.signingConfigs.devPlayConfig.storeFile = file(devStorefile)
    android.signingConfigs.devPlayConfig.storePassword = devStorePassword
    android.signingConfigs.devPlayConfig.keyAlias = devKeyAlias
    android.signingConfigs.devPlayConfig.keyPassword = devKeyPassword
} else {
    project.logger.warn('WARN: Set the values devStorefile, devStorePassword, devKeyAlias, and devKeyPassword in ~/.gradle/gradle.properties to sign the release.')
    android.buildTypes.devrelease.signingConfig = null
}

if (project.hasProperty('releaseStorefile') &&
    project.hasProperty('releaseStorePassword') &&
    project.hasProperty('releaseKeyAlias') &&
    project.hasProperty('releaseKeyPassword')) {
    android.signingConfigs.releasePlayConfig.storeFile = file(releaseStorefile)
    android.signingConfigs.releasePlayConfig.storePassword = releaseStorePassword
    android.signingConfigs.releasePlayConfig.keyAlias = releaseKeyAlias
    android.signingConfigs.releasePlayConfig.keyPassword = releaseKeyPassword
} else {
    project.logger.warn('WARN: Set the values releaseStorefile, releaseStorePassword, releaseKeyAlias, and releaseKeyPassword in ~/.gradle/gradle.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}


static String versionBanner() {
    return 'git describe --long'.execute().text.trim()
}


tasks.withType(JavaCompile) {
    if (name != "compileDebugJavaWithJavac") return
    doLast {
        println "weaving cats into the app..."
        String[] args = [
                "-showWeaveInfo",
                "-1.5",
                "-inpath", destinationDir.toString(),
                "-aspectpath", classpath.asPath,
                "-d", destinationDir.toString(),
                "-classpath", classpath.asPath,
                "-bootclasspath", android.bootClasspath.join(File.pathSeparator)
        ]

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error "ERROR: " + message.message, message.thrown
                    break
                case IMessage.WARNING:
                    log.warn "WARN: " + message.message, message.thrown
                    break
                case IMessage.INFO:
                    log.info "INFO: " + message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.info "DEBUG " + message.message, message.thrown
                    break
            }
        }
    }
}
